<?php

    namespace ObjectivePHP\Config;
    
    
    use ObjectivePHP\Matcher\Matcher;
    use ObjectivePHP\Primitives\Collection\Collection;

    class Config extends Collection implements ConfigInterface
    {

        /**
         * @var string Current config section
         */
        protected $section;


        /**
         * @param array  $input
         * @param int    $flags
         * @param string $iterator_class
         */
        public function __construct($input = [], $flags = \ArrayObject::ARRAY_AS_PROPS, $iterator_class = "ArrayIterator")
        {
            parent::__construct($input, $flags, $iterator_class); // TODO: Change the autogenerated stub
        }

        /**
         * Ease fluent interface
         *
         * @param            $key
         * @param null|mixed $default
         *
         * @return mixed|Config
         */
        public function get($key, $default = null)
        {

            // if object has FQN key, return value
            if($this->has($key))
            {
                return $this->toArray()[$key];
            }

            // also try using current section as prefix (if any)
            if($section = $this->getSection())
            {
                $keyFQN = $this->section . '.' . $key;

                if($this->has($keyFQN))
                {
                    return $this->toArray()[$keyFQN];
                }
            }

            /**
             * @var $subSet Config
             */
            $subSet = $this->copy();

            $matcher = new Matcher();

            $subSet->filter(function(&$value, $directive) use($subSet, $key, $matcher)
            {
                return $matcher->match($key . '.*', $directive);

            });

            if(!$subSet->isEmpty())
            {
                $subSet->setSection($key);
            }

            return $subSet;
        }

        /**
         * Wrapper for of array_merge
         *
         * @param $data
         *
         * @return $this
         */
        public function merge($data)
        {
            $data = Config::cast($data);

            foreach($data->getMergers() as $keys => $merger)
            {
                $this->addMerger($keys, $merger);
            }

            return parent::merge($data);
        }


        /**
         * @return string
         */
        public function getSection()
        {
            return $this->section;
        }

        /**
         * @param string $section
         *
         * @return $this
         */
        public function setSection($section)
        {

            if(!is_null($section))
            {
                // clear normalizers
                $this->normalizers = new Collection();
            }

            $this->section = $section;

            $this->addKeyNormalizer(function(&$key)
            {
                $prefix = $this->getSection() . '.';

                if(strpos($key, $prefix) !== 0)
                {
                    $key = $prefix . $key;
                }
            });

            return $this;
        }

        /**
         * @param array $configData
         */
        public static function factory($configData)
        {

            $section = null;
            $mergers = null;
            $validators = null;

            if(isset($configData['directives']))
            {
                $section  = isset($configData['section']) ? $configData['section'] : null;
                $mergers = isset($configData['mergers']) ? $configData['mergers'] : null;
                $validators = isset($configData['validators']) ? $configData['validators'] : null;
                $configData = $configData['directives'];
            }

            $config = new Config($configData);

            if($section) $config->setSection($section);
            if($mergers)
            {
                foreach($mergers as $keys => $merger) $config->addMerger($keys, $merger);
            }

            if($validators) {
                foreach($validators as $validator) $config->addValidator($validator);
            }

            return $config;
        }

    }